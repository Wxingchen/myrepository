#appender 日志输出到哪;layout 格式布局；logger控制单元；level级别
# %p 日志的级别; %d 时间格式; %C 全类名; %M 方法名；%m 代码里指定的信息;
# %t 线程名;%l 日志事件发生的位置 比如代码 类名线程名; %n 换行符

#  org.slf4j.LoggerFactory; org.slf4j.Logger; 这两个包下  可以这样使用 log.info("{}",变量)
# private static final Logger log = LoggerFactory.getLogger(TestDemo.class);

### 用默认的root级别的控制器把debug级别(且比这个级别高info warn error)的
# 日志输出到控制台和文件 这种配置粒度越细致 随细致的那个级别 (级别取精确 输出为各自)
#log4j.logger.cn.taoqi=error,FILE,CONSOLE
log4j.rootLogger=debug,FILE,CONSOLE
#log4j.logger.cn.taoqi=debug,taoqi.File,taoqi.Console
#log4j.logger.cn.taoqi.dao=info,taoqi.File,taoqi.Console


### 输出信息到控制抬 ###
log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern = [%5p] %d{yyyy-MM-dd HH:mm:ss,SSS} [%t] (%C:%M) %m%n

### 输出DEBUG 级别以上的日志到=E://logs/error.log ###
log4j.appender.FILE= org.apache.log4j.DailyRollingFileAppender
log4j.appender.FILE.file = E://logs/log.log
# 当天的是log.log 前一天或者后一天就变成为log.2020-03-03
log4j.appender.FILE.DatePattern=.yyyy-MM-dd
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern = [%5p] %d{yyyy-MM-dd HH:mm:ss,SSS} [%t] (%C:%M) %m%n
